name: deploy action

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


env:
  REGISTRY: "docker.io"
  NAMESPACE: "clean01"
  IMAGE_NAME: "layer-server"

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      deploy_target: ${{ steps.set-env.outputs.DEPLOY_TARGET }}

    steps:
      - name: Setup Env
        id: set-env
        run: |
          echo "DEPLOY_TARGET=production" >> $GITHUB_OUTPUT

  build:
    name: build
    needs: [ setup ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      DEPLOY_TARGET: ${{ needs.setup.outputs.deploy_target }} # 이부분
      REGISTRY: "docker.io"
      NAMESPACE: "clean01"
      APPLICATION_SECRET_PROPERTIES: ${{ secrets.AWS_APPLICATION_SECRET_PROPERTIES }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    steps:
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Gradle
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0

      - name: Create application-secret.properties
        run: |
          echo "${APPLICATION_SECRET_PROPERTIES}" > ./layer-api/src/main/resources/application-secret.properties    

      - name: Build layer-api module
        run: ./gradlew :layer-api:build

      - name: Test layer-api module
        run: ./gradlew :layer-api:test

      - name: Docker Hub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_EMAIL }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}_layer-api   

      - name: Push layer-api Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./layer-api
          file: ./layer-api/Dockerfile # Dockerfile 이름 지정
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}_layer-api:latest
          build-args: |
            SPRING_PROFILE=prod
          no-cache: true

  deploy:
    name: Deploy
    needs: [ build, setup ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    env:
      DEPLOY_TARGET: ${{ needs.setup.outputs.deploy_target }}
      HOST_IP: ${{ needs.setup.outputs.host_ip }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Create application-secret.properties file
        run: |
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES }}" > ./layer-api/infra/${{ env.DEPLOY_TARGET }}/application-secret.properties

      - name: Archive Files
        run: |
          tar -cvzf layer-api.tar.gz ./layer-api/infra/${{ env.DEPLOY_TARGET }}/

      - name: Send Docker Compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_PROD_INSTANCE_HOST }} # aws-cicd-dev.yml과 분리한 이유
          username: ubuntu
          key: ${{ secrets.AWS_INSTANCE_PEM }}
          port: 22
          source: "layer-api.tar.gz"
          target: "/home/ubuntu"

      - name: Extract Files on Server and Set Permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_PROD_INSTANCE_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_INSTANCE_PEM }}
          port: 22
          script: |
            cd /home/ubuntu
            tar -xvzf layer-api.tar.gz
            sudo chmod -R 755 /home/ubuntu/layer-api/infra/${{ env.DEPLOY_TARGET }}
            sudo chown -R ubuntu:ubuntu /home/ubuntu/layer-api/infra/${{ env.DEPLOY_TARGET }}


      - name: Set Permissions on Transferred Files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_PROD_INSTANCE_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_INSTANCE_PEM }}
          port: 22
          script: |
            sudo chmod -R 755 /home/ubuntu/layer-api/infra/${{ env.DEPLOY_TARGET }}
            sudo chown -R ubuntu:ubuntu /home/ubuntu/layer-api/infra/${{ env.DEPLOY_TARGET }}

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_PROD_INSTANCE_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_INSTANCE_PEM }}
          port: 22
          script: |
            sudo docker login --username ${{ secrets.DOCKER_EMAIL }} --password ${{ secrets.DOCKER_PASSWORD }}
            cd /home/ubuntu/layer-api/infra/${{ env.DEPLOY_TARGET }}
            chmod 777 ./deploy.sh
            ./deploy.sh
            sudo docker image prune -a -f
